# Overline

Objective-C utilities and shorthands.

Overline is not clone of other language features.
Simple and clean Objective-C.

## Usage

setup with cocoapods.
```
pod 'Overline'
```

import `Overline.h`
```objective-c
#import "Overline.h"
```


## Features

### NSArray

#### NSArray+Enumeration

```objective-c
NSArray *mapped = [@[@1,@2,@3,@4,@5,@6] mappedArrayUsingBlock:^id(id obj, NSUInteger idx) {
    if ([obj integerValue] % 2 == 0) {
        return obj;
    }
    return nil;
}];
// @[@2,@4,@6]
```

* `each`
* `map` `mappedArrayUsingBlock`
* `reduce` `reducedObjectByBlock`
* `find` `objectUsingBlock`
* `filter` `filteredArrayUsingBlock`
* `reject` `rejectedArrayUsingBlock`

#### NSArray+Random

```objective-c
NSArray *shuffled = [@[@1,@2,@3,@4,@5,@6] shuffledArray];
```

* `shuffle` `shuffledArray`
* `anyObject`

#### NSArray+Selector

* `firstObject`

#### NSArray+SubArray

* `subarrayFromIndex:`
* `subarrayFromIndex:length:`
* `subarrayTo:`

### NSMutableArray
#### NSMutableArray+Shorthands

```objective-c
NSMutableArray *marray = [NSMutableArray arrayWithArray:@[@1,@2,@3]];
[marray insertObjects:@[@4,@5,@6] atIndex:1];
```

* `insertObjects:atIndex:`


### NSDictionary

#### NSDicionary+Enumeration

```objective-c
NSDictionary *dic = @{
        @"a" : @1,
        @"b" : @2,
        @"c" : @3,
        @"d" : @4
};

NSDictionary *filtered = [dic dictionaryFilteredByKeyUsingBlock:^BOOL(NSString *key) {
    return [key isEqualToString:@"a"];
}]; // @{@"a":@1}
 ```

* `each:`
* `map` `mappedDictionaryUsingBlock`
* `filterKey` `dictionaryFilteredByKeyUsingBlock`
* `rejectKey` `dictionaryRejectedByKeyUsingBlock`
* `filterObject` `dictionaryFilteredByObjectUsingBlock`
* `rejectObject` `dictionaryRejectedByObjectUsingBlock`
* `merge` `dictionaryByMergingDictionary`
* `reduce:` `reducedObjectUsingBlock:memo:`
* `queryString` `stringByFormattingQuery`


#### NSDictionary+Path

```objective-c
NSString *s = [dic objectForPath:@"error.message"];
```

* `objectForPath:`

### NSSet
#### NSSet+Enumeration

```objective-c
NSSet *set = [NSSet setWithArray:@[@1,@2,@3,@4,@5,@6]];
NSSet *mapped = [set mappedSetUsingBlock:^id(id obj, NSUInteger idx) {
    if ([obj integerValue] % 2 == 0) {
        return obj;
    }
    return nil;
}];
```

* `each`
* `map` `mappedSetUsingBlock`
* `reduce` `reducedObjectByBlock`
* `filter` `filteredSetUsingBlock`
* `reject` `rejectedSetUsingBlock`

### NSString 

#### NSString+Components

```objective-c
[@"hoge=fuga&piyo=foo" componentsSeparatedByInnerString:@"=" andOuterString:@"&"];
/* 
@{
    @"hoge" : @"fuga",
    @"piyo" : @"foo"
};
*/
```

* `componentsSeparatedByInnerString:andOuterString:`

#### NSString+RegularExpression

```objective-c
[@"https?" testInString:urlString];
```
* `rangeOfFirstMatchInString:`
* `rangeOfFirstMatchInString:options:`
* `matchesInString:`
* `matchesInString:options:`
* `testInString:`
* `testInString:options:`

#### NSString+Hash

```objective-c
[@"hoge" md5]; // @"ea703e7aa1efda0064eaa507d9e8ab7e"
```

* `sha256`
* `stringByHashingSha256`
* `md5`
* `stringByHashingMD5`

#### NSString+URLEncode
* `URLEncode`
* `stringByEncodingURL`
* `URLDecode`
* `stringByDecodingURL`

#### NSString+Shorthand
* `trim`

#### NSString+JSON
```objective-c
NSString *JSONString = @"{\"hoge\" : \"fuga\" }";
id json = [JSONString jsonObject];
```
* `JSON` `jsonObject`

#### NSString+Base64Encode
```objective-c
[@"a" stringByEncodingBase64]; // @"YQ=="
[@"YQ==" stringByDecodingBase64]; // @"a"
```

* `encodeBase64` `stringByEncodingBase64`
* `decodeBase64` `stringByDecodingBase64`
* `dataUsingDecodingBase64`

### NSData
#### NSData+Base64Encode

* `base64Encode` `stringUsingEncodingBase64`

### NSURL

#### NSURL+Components
* `queryComponents`

### NSBundle

#### NSBundle+Shorthand
* `JSONForResourceName`

### NSNumber 

#### NSNumber+Equals

```objective-c
[@1 isEqualToInteger:1];
```

* `isEqualToInt:`
* `isEqualToInteger:`
* `isEqualToUnsignedInt:`
* `isEqualToUnsignedInteger:`
* `isEqualToLong:`
* `isEqualToLongLong:`
* `isEqualToUnsignedLong:`
* `isEqualToUnsignedLongLong:`
* `isEqualToDouble:`
* `isEqualToFloat:`

### NSObject

#### NSObject+Equals
```objective-c
[[NSNull null] isNullObject]; // YES
[[NSArray array] isNullObject]; // NO
```
* `isNullObject`
* `isArray`
* `isDictionary`
* `isSet`
* `isString`
* `isNumber`

### NSNull

#### NSNull+Natural
Provide `NSNull` like `nil`
```objective-c
NSDictionary *dic = @{
        @"null-key" : [NSNull null]
};
[[dic objectForKey:@"null-key"] objectForKey:@"empty"]; // nil
```

â€» This feature disable on default. Define `OV_USE_NATURAL_NULL`, if use this feature.
```objective-c
#define OV_USE_NATURAL_NULL
#import "Overline.h"
```

## For contributers

Thanks contributes Overline.

### Coding rules

* Write tests.
* Objective-C style naming.
  * and shorthands.
